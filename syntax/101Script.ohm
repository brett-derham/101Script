IOIScript {
  Program     =  newline* (Block | ClassDecl) newline*
  Block       =  (Stmt | SimpleStmt | Exp | newline )+
  Stmt        =  SimpleStmt newline                      -- simple
              |  "loopWhile" "(" Exp ")" ":" Block ";"   -- while
              |  "loop" "(" Exp ")" ":" Block ";"        -- loop
              |  "if" "(" Exp ")" ":" Block ";" newline
                 ("else if" "(" Exp ")"":" Block ";")* newline
                 ("else" ":" Block ";")?                 -- if
              |  "function" id "(" Params ")" ":" Block ";"           -- function
  SimpleStmt  =  id ("=" | "gets") Exp                              -- vardecl
              |  VarExps ("=" | "gets") Exp                          -- assign
              |  Call                                    -- call
              |  "break"                                 -- break
              |  "return" Exp?                           -- return

  Exp         =  Exp "or" Exp1                           -- or
              |  Exp "and" Exp1                          -- and
              |  Exp1
  Exp1        =  Exp2 relop Exp2                         -- binary
              |  Exp2
  Exp2        =  Exp2 addop Exp3                         -- binary
              |  Exp3
  Exp3        =  Exp3 mulop Exp4                         -- binary
              |  Exp4
  Exp4        =  prefixop Exp5                           -- unary
              |  Exp5
  Exp5        =  boollit
              |  numlit
              |  strlit
              |  "[" ListOf<Exp, ","> "]"                -- list
              |  Call
              |  VarExp
              |  "(" Exp ")"                             -- parens
              |  NewObject                              
  Call        =  VarExp "(" Args ")"

  ClassDecl   =  "class" id ("extends" id)? ":" Block* ";"   -- class
  NewObject   =  "object" id "=" ":" Args ";"                -- object
  VarExp      =  VarExp "[" Exp "]"                      -- subscripted
              |  id                                      -- simple
  VarExps     =  NonemptyListOf<VarExp, ",">
  Param       =  id ("=" Exp)?
  Params      =  ListOf<Param, ",">
  Arg         =  (id ":")? Stmt
  Args        =  ListOf<Arg, ";">

  keyword     =  ("loopWhile" | "if" | "else" | "else" | "function" | "return" | "print"
              |  "break" | "and" | "or" | "not" | "true" | "false" |  "lessOrEq" | "lessThan"
              | "equals" | "notEqual" | "greaterOrEq" | "greaterThan" | "addedTo" | "multipliedTo"
              | "subtractedFrom" | "dividedFrom" | "gets" | "remainder" | "class" | "extends" | "object") ~idrest
  id          =  ~keyword ("_" | letter) idrest*
  idrest      =  "_" | alnum
  numlit      =  digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
  boollit     =  "true" | "false"
  strlit      = "\"" (~"--" ~"\"" ~"\n" any | escape)* "\""
  escape      = "\\" ("\\" | "\"" | "n")               -- simple
  addop       =  "+" | "-" | "addedTo" | "subtractedFrom"
  relop       =  "<=" | "<" | "==" | "!=" | ">=" | ">"
              |  "lessOrEq" | "lessThan" | "equals" | "notEqual" | "greaterOrEq" | "greaterThan"
  mulop       =  "*" | "/" | "%" | "^" | "multipliedTo" | "dividedFrom" | "remainder"
  prefixop    =  "-" | "not"
  newline     =  "\n"+
  space      :=  " " | "\t" | comment
  comment     =  "--" ~"--" (~newline ~"--" any)*      -- comment
}
